<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Culture on Ken&#39;s Conference Notes</title>
    <link>/conference-notes/tags/culture/</link>
    <description>Recent content in Culture on Ken&#39;s Conference Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/conference-notes/tags/culture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building SRE from Scratch at Coinbase during Hypergrowth [DEV315]</title>
      <link>/conference-notes/aws_reinvent_2018/coinbase_sre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/conference-notes/aws_reinvent_2018/coinbase_sre/</guid>
      <description>Key Insights  measure and improve human, organizational and machine systems  measure everything always  SRE is a move from reactive to proactive event mgmt  eliminate toil and eliminate them  toil = manual operational work that doesn&amp;rsquo;t scale   Provide organizational back pressure mechanism  delay features to clean up tech debt don&amp;rsquo;t deploy new code until the app is more reliable push back to teams/the org feedback loop   How to convert ppl * set early expectations * have to get C-level buy in * takes time</description>
    </item>
    
    <item>
      <title>Moving to DevOps the Amazon Way [DEV210]</title>
      <link>/conference-notes/aws_reinvent_2018/amazon_devops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/conference-notes/aws_reinvent_2018/amazon_devops/</guid>
      <description>    50 million deploys/year tools start to dictate behavior cultural philosphy  how often do we want to interact with our customers   timeline
 2001 amazon was a monolith monolith had a lot of interdependencies went back and isolated independent units  cart stock labeling  each unit gets 2 pizza teams after breaking up the units, agile was easier creating a multi-displinary team is NOT devops  each team member should have multiple skills, with fullstack ownership learn new things, compliment team  everything is code, so everything can be tested guardrails for self-service &amp;lt;&amp;ndash; key idea  opinionated templates helps bootstrap quickly without falling off the cliff   </description>
    </item>
    
    <item>
      <title>Role of Central Teams in DevOps Organizations [DEV70]</title>
      <link>/conference-notes/aws_reinvent_2018/central_teams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/conference-notes/aws_reinvent_2018/central_teams/</guid>
      <description>small companies have small Teams
 as it grows, central teams develop (ex. tools, platfomrm, infra)
 becomes a &amp;ldquo;fractal&amp;rdquo; of central teams
 different BUs have central teams that talk to a central time  moving from traditional dev/ops/qa model to full end-end ownership
 with DevOps teams, why do we need central teams?
 most devops teams, while their work is different, they have the same software development lifecycle</description>
    </item>
    
  </channel>
</rss>