<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Session on Ken&#39;s Conference Notes</title>
    <link>/conference-notes/tags/session/</link>
    <description>Recent content in Session on Ken&#39;s Conference Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/conference-notes/tags/session/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Accelerate Innovation &amp; Maximize Business Value with Serverless Apps [SRV212]</title>
      <link>/conference-notes/aws_reinvent_2018/comcast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/conference-notes/aws_reinvent_2018/comcast/</guid>
      <description>pluses * streamlined devops, codepipeline * supports a lot of languages * tag direct costs to projects
considerations: * know what specialties are * certain languages not supported * need to deal with cold starts, concurrent read/writes, etc. * migration from non-aws requires focus and commitment
 kinesis firehose to watch for inbound connections faster than humans could do, and then try to shut down (ex. using &amp;ldquo;i am not a robot&amp;rdquo;)</description>
    </item>
    
    <item>
      <title>Advanced Continuous Delivery Best Practices [DEV317]</title>
      <link>/conference-notes/aws_reinvent_2018/advanced_cd_best_practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/conference-notes/aws_reinvent_2018/advanced_cd_best_practices/</guid>
      <description>cd best practices * VCS * automated builds * automated deployments * deploy to &amp;gt; 1 instances (HA, spread load) * unit tests * integration tests (selenium, functional, syntentic users) * deliver * op Tools in the talk - AWS specific * monitoring - cloudwatch * sns - notifications * lambda * aws codedeploy/codepipeline for delivery * DEV309 - serverless + containers codedeploy/codepipeline
Add saftey to rolling deployments * check health * ensure minimum instances * rollback</description>
    </item>
    
    <item>
      <title>Building SRE from Scratch at Coinbase during Hypergrowth [DEV315]</title>
      <link>/conference-notes/aws_reinvent_2018/coinbase_sre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/conference-notes/aws_reinvent_2018/coinbase_sre/</guid>
      <description>Key Insights  measure and improve human, organizational and machine systems  measure everything always  SRE is a move from reactive to proactive event mgmt  eliminate toil and eliminate them  toil = manual operational work that doesn&amp;rsquo;t scale   Provide organizational back pressure mechanism  delay features to clean up tech debt don&amp;rsquo;t deploy new code until the app is more reliable push back to teams/the org feedback loop   How to convert ppl * set early expectations * have to get C-level buy in * takes time</description>
    </item>
    
    <item>
      <title>Moving to DevOps the Amazon Way [DEV210]</title>
      <link>/conference-notes/aws_reinvent_2018/amazon_devops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/conference-notes/aws_reinvent_2018/amazon_devops/</guid>
      <description>    50 million deploys/year tools start to dictate behavior cultural philosphy  how often do we want to interact with our customers   timeline
 2001 amazon was a monolith monolith had a lot of interdependencies went back and isolated independent units  cart stock labeling  each unit gets 2 pizza teams after breaking up the units, agile was easier creating a multi-displinary team is NOT devops  each team member should have multiple skills, with fullstack ownership learn new things, compliment team  everything is code, so everything can be tested guardrails for self-service &amp;lt;&amp;ndash; key idea  opinionated templates helps bootstrap quickly without falling off the cliff   </description>
    </item>
    
    <item>
      <title>Role of Central Teams in DevOps Organizations [DEV70]</title>
      <link>/conference-notes/aws_reinvent_2018/central_teams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/conference-notes/aws_reinvent_2018/central_teams/</guid>
      <description>small companies have small Teams
 as it grows, central teams develop (ex. tools, platfomrm, infra)
 becomes a &amp;ldquo;fractal&amp;rdquo; of central teams
 different BUs have central teams that talk to a central time  moving from traditional dev/ops/qa model to full end-end ownership
 with DevOps teams, why do we need central teams?
 most devops teams, while their work is different, they have the same software development lifecycle</description>
    </item>
    
  </channel>
</rss>